/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.0.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 0.001; //`0.001` scales to `mm`
//blunted nozzle with upper and lower parts

vertices
(
//axis Points on Z
  (0 0 0)			//0
  (0 0 5)			//1
  (0 0 8)			//2
//Wedge Points on Wall & Middle on front face (with θ=2.5˚)
  (0.1 0.004361938737 0)			//3  0.1*sin(2.5π/180)
  (0.1 0.004361938737 5)			//4
  (0.1 0.004361938737 8)			//5
//Wedge Points (with θ=2.5˚) on front face
  (1.5 0.06542908105 5)      //6  1.5*sin(2.5π/180)
  (1.5 0.06542908105 8)      //7
//Wedge Points on Wall & Middle on back face (with θ=2.5˚)
  (0.1 -0.004361938737 0)			//8  0.1*sin(2.5π/180)
  (0.1 -0.004361938737 5)			//9
  (0.1 -0.004361938737 8)			//10
//Wedge Points (with θ=2.5˚) on back face
  (1.5 -0.06542908105 5)    //11  1.5*sin(2.5π/180)
  (1.5 -0.06542908105 8)    //12
);

blocks
(
  hex (0 3 4 1 0 8 9 1) (10 100 1) simpleGrading (1 1 1)//block0 (.33 1 1)lower_nozzle
  hex (1 4 5 2 1 9 10 2) (10 100 1) simpleGrading (1 1 1)//block1 (18 1 10)upper_nozzle_conforming_lower_nozzle
  hex (4 6 7 5 9 11 12 10) (50 100 1) simpleGrading (1 1 1)//block2 (18 1 10)upper_nozzle_nonconforming_lower_nozzle
);

edges
(
);

boundary
(
    axis
      {
          type 		empty;
          faces
          (
              (0 1 1 0)
              (1 2 2 1)
            );
      }
    inlet
    	{
        	type 		patch;
        	faces
        	(
            	(2 10 5 2)	//clockwise from outside the domain, as fluid going inwards
              (10 12 7 5)
        	);
    	}
    outlet
    	{
       		type 		patch;
        	faces
        	(
            	(0 8 3 0)	//clockwise from inside the domain, as fluid going outwards
        	);
    	}
    nozzleWall
    	{
        	type 		wall;
        	faces
        	(
            	(7 12 11 6)
              (6 11 9 4)
		          (4 9 8 3)
        	);
    	}
    sideFront
    	{
        	type 		wedge;
        	faces
        	(
            	(0 1 4 3)
            	(1 2 5 4)
              (4 5 7 6)
        	);
    	}
    sideBack
    	{
        	type 		wedge;
        	faces
        	(
            	(0 8 9 1)
              (1 9 10 2)
            	(9 11 12 10)
        	);
    	}
);

mergePatchPairs
(
);

// ************************************************************************* //
